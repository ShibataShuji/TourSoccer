#include "map.h"
#include "texture.h"
#include "sprite.h"
#include "polygon.h"


//*****************************************************************************
// マクロ定義
//*****************************************************************************


//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************
//struct MAP_DATA_T
//{
//	D3DXVECTOR2 uv;		//UV値
//	int			stop;	//侵入可能フラグ(1は進入禁止)
//
//};
//
//MAP_DATA_T g_MapInfo[3] =
//{
//	{ { 0.25f,   0.0f}, 0},//なにもなし
//	{ {  0.0f, 0.625f}, 1},//木
//	{ {0.625f, 0.625f}, 1},//切り株
//};


//*****************************************************************************
// グローバル変数
//*****************************************************************************
int g_map_test_01[4][10][20] = {
	{
		// 1番手前
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1}
    },
	{
		// 手前から2番目
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1}
	},
	{
		// 手前から3番目
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1}
	},
	{
		// 手前から4番目
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0},
		{1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1}
	}
};


int Tex_field000 = 0;
int Tex_field001 = 0;

static int g_Ground = 0;		// 背景用テクスチャ情報
static int g_CurrentPos = 0;	// 現在のマップ座標

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT InitMap(void)
{
	g_Ground = LoadTexture("data/TEXTURE/basechip.png");

	Tex_field000 = LoadTexture("data/TEXTURE/field000.jpg");
	Tex_field001 = LoadTexture("data/TEXTURE/player.png");




	// てすと
	for (int i = 0; i < 3; i++)
	{
		SetObject(2, Tex_field000, D3DXVECTOR3(0.0f + TEST01 * i, 0.0f + TEST01 * i, 0.0f + TEST01 * i),
			D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(TEST01, TEST01, TEST01), D3DXVECTOR3(1.0f, 1.0f, 1.0f),
			0.0f, 0.0f, 1.0f, 1.0f,
			D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), false, D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1);
	}



	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitMap(void)
{

}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateMap(void)
{

}

//=============================================================================
// 描画処理
//=============================================================================
void DrawMap(void)
{
	float offset_y;

	if (g_CurrentPos == 0)
		offset_y = 0.0f;
	else
		offset_y = -560.0f;




	for (int z = 0; z < MAP_Z_MAX; z++)
	{
		for (int y = 0; y < MAP_Y_MAX; y++)
		{
			for (int x = 0; x < MAP_X_MAX; x++)
			{
				switch (g_map_test_01[z][y][x])
				{
				case 0://何も表示しない

					break;
				case 1://道
					// yのposのとこで( (MAP_Y_MAX - 1) - y)をしているのは中身が10この配列でも0~9で数えるずれの補正
					SetObject(2, Tex_field000, D3DXVECTOR3(0.0f + (x * MAPCHIP_SIZE_X), 0.0f + (( (MAP_Y_MAX - 1) - y) * MAPCHIP_SIZE_Y), 0.0f + (z * MAPCHIP_SIZE_Z) ),
						D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(MAPCHIP_SIZE_X, MAPCHIP_SIZE_Y, MAPCHIP_SIZE_Z), D3DXVECTOR3(1.0f, 1.0f, 1.0f),
						0.0f, 0.0f, 1.0f, 1.0f,
						D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), false, D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1);
					break;
				}
			}
		}
	}

	//SetObject(2, Tex_field000, D3DXVECTOR3(0.0f + (0 * MAPCHIP_SIZE_X), 0.0f + (((MAP_Y_MAX - 1) - 9) * MAPCHIP_SIZE_Y), 0.0f + (0 * MAPCHIP_SIZE_Z)),
	//	D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(MAPCHIP_SIZE_X, MAPCHIP_SIZE_Y, MAPCHIP_SIZE_Z), D3DXVECTOR3(1.0f, 1.0f, 1.0f),
	//	0.0f, 0.0f, 1.0f, 1.0f,
	//	D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), false, D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1);

	//SetObject(2, Tex_field000, D3DXVECTOR3(0.0f + (1 * MAPCHIP_SIZE_X), 0.0f + (((MAP_Y_MAX - 1) - 9) * MAPCHIP_SIZE_Y), 0.0f + (0 * MAPCHIP_SIZE_Z)),
	//	D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(MAPCHIP_SIZE_X, MAPCHIP_SIZE_Y, MAPCHIP_SIZE_Z), D3DXVECTOR3(1.0f, 1.0f, 1.0f),
	//	0.0f, 0.0f, 1.0f, 1.0f,
	//	D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), false, D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1);

	//SetObject(0, Tex_field000, D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f),
	//	D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 1.0f), D3DXVECTOR3(1.0f, 1.0f, 1.0f),
	//	0.0f, 0.0f, 1.0f, 1.0f,
	//	D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), false, D3DXVECTOR3(0.0f, 0.0f, 0.0f), 1);


	//レイヤー０の表示
	//for (int y = 0; y < 14; y++)
	//{
	//	for (int x = 0; x < 12; x++)
	//	{
	//		switch (g_map_base[y][x])
	//		{
	//		case 0://草原
	//			DrawSpriteLeftTop(g_Ground, 0.0f + x * 80.0f, offset_y + y * 80.0f, 80.0f, 80.0f, 0.0f, 0.0f, 0.125f, 0.125f);
	//			break;
	//		case 1://道
	//			DrawSpriteLeftTop(g_Ground, 0.0f + x * 80.0f, offset_y + y * 80.0f, 80.0f, 80.0f, 0.625f, 0.0f, 0.125f, 0.125f);
	//			break;
	//		}
	//	}
	//}

	////背景オブジェクトの表示
	//for (int y = 0; y < 14; y++)
	//{
	//	for (int x = 0; x < 12; x++)
	//	{
	//		MAP_DATA_T mapchip;
	//		mapchip = g_MapInfo[g_map_obj[y][x]];

	//		DrawSpriteLeftTop(g_Ground, 0.0f + x * 80.0f, offset_y + y * 80.0f, 80.0f, 80.0f, mapchip.uv.x, mapchip.uv.y, 0.125f, 0.125f);
	//	}
	//}
}

//int GetMapEnter(D3DXVECTOR2 pos)
//{
//	int x, y;
//	x = (int)(pos.x / 80.0f);//座標をマップチップ一つの大きさで割る
//	y = (int)(pos.y / 80.0f);
//
//	return g_map_hitchk[g_CurrentPos][y][x];
//}

void SetCurrentMap(int next)
{
	g_CurrentPos = next;
}
